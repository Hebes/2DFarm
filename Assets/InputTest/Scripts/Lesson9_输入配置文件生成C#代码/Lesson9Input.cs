//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputTest/Scripts/Lesson9_输入配置文件生成C#代码/Lesson9Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Lesson9Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Lesson9Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Lesson9Input"",
    ""maps"": [
        {
            ""name"": ""Action1"",
            ""id"": ""7f07b859-61c5-4e32-b2df-750486d75b94"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""3c6c8a3b-8743-4006-b9da-205c44780379"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f1c04d71-a9bf-4f61-98ff-716a7ca7124c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7209f910-8e25-4c1c-b4b6-fad857135ffb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""110696ca-a982-41a5-8db9-d028a1f24a00"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ad5c9ffd-9cb2-464f-ad7b-b3bc6ce11d70"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6c25584f-b425-48ca-8f53-5d74df1c55ab"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""70d15de5-f4f5-45e3-b567-870f60fab1d8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""00371291-9f79-4fba-aa99-8e2c49ca199c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Action2"",
            ""id"": ""b093ac79-428f-4887-a5d1-ed3f4741f94d"",
            ""actions"": [
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""7164bc0f-e005-4939-b57a-254feadfcf70"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cc423b15-e134-4463-b8d3-a41aeef2513f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Action1
        m_Action1 = asset.FindActionMap("Action1", throwIfNotFound: true);
        m_Action1_Fire = m_Action1.FindAction("Fire", throwIfNotFound: true);
        m_Action1_Move = m_Action1.FindAction("Move", throwIfNotFound: true);
        // Action2
        m_Action2 = asset.FindActionMap("Action2", throwIfNotFound: true);
        m_Action2_Space = m_Action2.FindAction("Space", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Action1
    private readonly InputActionMap m_Action1;
    private List<IAction1Actions> m_Action1ActionsCallbackInterfaces = new List<IAction1Actions>();
    private readonly InputAction m_Action1_Fire;
    private readonly InputAction m_Action1_Move;
    public struct Action1Actions
    {
        private @Lesson9Input m_Wrapper;
        public Action1Actions(@Lesson9Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_Action1_Fire;
        public InputAction @Move => m_Wrapper.m_Action1_Move;
        public InputActionMap Get() { return m_Wrapper.m_Action1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Action1Actions set) { return set.Get(); }
        public void AddCallbacks(IAction1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Action1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Action1ActionsCallbackInterfaces.Add(instance);
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IAction1Actions instance)
        {
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IAction1Actions instance)
        {
            if (m_Wrapper.m_Action1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAction1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Action1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Action1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Action1Actions @Action1 => new Action1Actions(this);

    // Action2
    private readonly InputActionMap m_Action2;
    private List<IAction2Actions> m_Action2ActionsCallbackInterfaces = new List<IAction2Actions>();
    private readonly InputAction m_Action2_Space;
    public struct Action2Actions
    {
        private @Lesson9Input m_Wrapper;
        public Action2Actions(@Lesson9Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Space => m_Wrapper.m_Action2_Space;
        public InputActionMap Get() { return m_Wrapper.m_Action2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Action2Actions set) { return set.Get(); }
        public void AddCallbacks(IAction2Actions instance)
        {
            if (instance == null || m_Wrapper.m_Action2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Action2ActionsCallbackInterfaces.Add(instance);
            @Space.started += instance.OnSpace;
            @Space.performed += instance.OnSpace;
            @Space.canceled += instance.OnSpace;
        }

        private void UnregisterCallbacks(IAction2Actions instance)
        {
            @Space.started -= instance.OnSpace;
            @Space.performed -= instance.OnSpace;
            @Space.canceled -= instance.OnSpace;
        }

        public void RemoveCallbacks(IAction2Actions instance)
        {
            if (m_Wrapper.m_Action2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAction2Actions instance)
        {
            foreach (var item in m_Wrapper.m_Action2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Action2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Action2Actions @Action2 => new Action2Actions(this);
    public interface IAction1Actions
    {
        void OnFire(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IAction2Actions
    {
        void OnSpace(InputAction.CallbackContext context);
    }
}
